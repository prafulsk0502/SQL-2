DROP TABLE  IF EXISTS Customer;
CREATE TABLE Customer(
Customer_ID INT PRIMARY KEY,
Customer_Name VARCHAR(100),
Email VARCHAR(100),
Phone BIGINT,
City VARCHAR(100),
Country VARCHAR(100)

);

DROP TABLE IF EXISTS Books;
CREATE TABLE Books(
Book_ID INT PRIMARY KEY,
Title VARCHAR(100),
Author VARCHAR(100),
Genre VARCHAR(100),
Published_Year INT,
Price INT,
Stock INT

);

DROP TABLE IF EXISTS Orders;
CREATE TABLE Orders(
Order_ID INT PRIMARY KEY,
Customer_ID INT REFERENCES Customer(Customer_ID),
Book_ID INT REFERENCES Books(Book_ID),
Order_Date VARCHAR(50),
Quantity INT,
Total_Amount BIGINT

);


SELECT * FROM Customer;
SELECT * FROM Books;
SELECT * FROM Orders;


COPY Customer(Customer_ID,Customer_Name,Email,Phone,City,Country)
FROM 'E:\PostGreySQL\Customers.csv'
CSV HEADER;

COPY Books(Book_ID,Title,Author,Genre,Published_Year,Price,Stock)
FROM 'E:\PostGreySQL\Books.csv' 
CSV HEADER;

COPY Orders(Order_ID,Customer_ID,Book_ID,Order_Date,Quantity,Total_Amount)
FROM 'E:\PostGreySQL\Orders.csv' 
CSV HEADER;


--1 Retrieve all books in "Fiction" genere;
SELECT * FROM Books 
WHERE Genre='Fiction';


--2Find Books published after the year 1950
SELECT * FROM Books
WHERE Published_Year > 1950;

--3 LIST ALL CUSTOMERS FROM CANADA
SELECT Customer_Name,COUNTRY FROM Customer
WHERE Country='Canada';

--4 SHOW ORDER PLACED IN NOVEMBER 2023
SELECT * 
FROM Orders
WHERE Order_Date BETWEEN '11-01-2023' AND '11-31-2023';

--5 RETRIEVE TOTAL STOCKS OF BOOKS AVAILABLE
SELECT SUM(Stock) AS Total_Stocks
FROM Books;

--6 FIND DETAILS OF THE MOST EXPENSIVE BOOK
SELECT *
FROM Books
ORDER BY Price DESC
LIMIT 1;

--7 SHOW ALL CUSTOMERS WHO HAVE ORDERED MORE THEN 1 QUANTITY
SELECT Customer_ID,Book_ID,Quantity
FROM Orders
WHERE Quantity>1;

--8 RETRIEVE ALL ORDERS WHERE TOTAL AMOUNT EXCEEDS 20
SELECT * FROM ORDERS
WHERE Total_Amount>20;

--9 LIST ALL THE GENRE AVAILABBLE IN THE BOOKS TABLE
SELECT DISTINCT Genre
FROM Books;

--10 FIND THE BOOK WITH LOWEST STOCK
SELECT *
FROM Books
ORDER BY Stock ASC
LIMIT 1;

--11 CALCUALTE TOTAL REVENUE GENERATED BY ALL ORDERS
SELECT SUM(Total_Amount) AS Total_Revenue
FROM Orders

--ADVANCE QUESTIONS
--12 RETRIEVE TOTAL NUMBER OF BOOKS SOLD FOR EACH GENRE
SELECT B.Genre,SUM(O.Quantity) AS Total_Quantity
FROM Orders O
JOIN Books B ON B.Book_ID = O.Book_ID
GROUP BY B.Genre;

--13 FIND THE AVERAGE PRICE FROM FANTACY GENRE
SELECT AVG(Price) AS Avg_Price
FROM Books
WHERE Genre='Fantasy';

--14 LIST CUSTOMERS WHO HAVE PLACED ATLEAST 2 ORDERS
SELECT Customer_ID,COUNT(Order_ID) AS Order_Count
FROM Orders
GROUP BY Customer_ID
HAVING COUNT(Order_ID)>2;

--15 FIND THE MOST FREQUENTLY ORDERED BOOK
SELECT Book_ID,COUNT(Order_ID) AS Order_Count
FROM Orders
GROUP BY Book_ID
ORDER BY Order_Count DESC LIMIT 1;

--16 SHOW THE TOP 3 MOST EXPENSIVE BOOKS OF "FANTASY" GENRE
SELECT * FROM Books
WHERE Genre='Fantasy'
ORDER BY Price DESC LIMIT 3;

--17 RETRIEVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR
SELECT B.Author ,SUM(O.Quantity) AS Total_Quantity
FROM ORDERS O
JOIN BOOKS B ON O.Book_ID = B.Book_ID
GROUP BY Author;

--18 LIST THE CITIES WHERE CUSTOMERS WHO SPENT OVER 30 RUPEES ARE LOCATED
SELECT C.City,C.Customer_Name,O.Total_Amount
FROM Customer C
JOIN Orders O ON O.Customer_ID = C.Customer_ID
WHERE O.Total_Amount >30;

--19 FIND THE CUSTOMER WHO SPENT THE MOST ON ORDERS
SELECT C.Customer_Name,SUM(O.Total_Amount) AS Total_Spent
FROM Customer C
JOIN Orders O ON O.Customer_ID=C.Customer_ID
GROUP BY C.Customer_ID 
ORDER BY Total_Spent DESC LIMIT 5;

--20 CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS
SELECT B.Book_ID , B.Title , B.Stock,COALESCE(SUM(Quantity),0) AS Order_Quantity,
		B.Stock -COALESCE(SUM(O.Quantity),0) AS Remaining_Quantity
FROM BOOKS B
LEFT JOIN ORDERS O ON B.Book_ID = O.Book_ID
GROUP BY B.Book_ID;